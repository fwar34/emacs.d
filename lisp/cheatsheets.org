#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+AUTHOR: feng
#+DATE: 2020-03-20 Fri 14:59
#+TITLE: test
#+DESCRIPTION: test
#+TAGS: test
#+CATEGORIES: test

#+TITLE: 一些emacs和elisp的cheatsheet
#+OPTIONS: toc:nil

#<<t1>> top

*** *emacs相关*
1. M-t 交换两个相邻的word
2. 在文档中用反引号和单引号括起来的symbol是可以跳转过去的，可以使用xref-find-definitions之类的函数(;xd)
3. 在minibuffer中C-y粘帖剪贴板的内容
4. 在minibuffer中M-j获取光标下的word
5. display-local-help(C-h .)显示光标底下的字符的附加信息
6. isearch-describe-bindings可以描述出isearch模式的所有绑定快捷键
7. 在/或者?(evil-search-forward,evil-search-backward)后isearch-yank-word-or-char(C-w)可以将光标处的word自动填充到搜索栏
8. 在/或者?(evil-search-forward,evil-search-backward)后isearch-yank-kill(C-y)可以将kill-ring的最后个word自动填充到搜索栏
9. (list-colors-display)可以显示颜色
10. (read-color)可以显示颜色
11. 可以M-x搜索color相关函数
12. emacs卡顿的话可以使用M-x profiler-start来统计cpu或者内存，等卡顿过后使用profiler-report来看是什么导致的卡顿
13. C-u C-x = (describe-char)可以看光标所在的字符的具体字符信息，包括了字符大小等，\\
    例如harfbuzz:-outline-Sarasa Fixed Slab SC-normal-normal-normal-mono-24-*-*-*-c-*-iso8859-1 (#x3F3F) 就是Sarasa Fixed Slab SC字体，大小是24
14. 在 calc 中使用 d 加上数字(0 6 8等)来切换进制
15. C-x = （what-cursor-position）来看光标下面的字符信息，包括了字符编码 point 信息等
16. global-display-line-number-mode 显示和隐藏行号
17. keep-lines 和 flush-lines 可以保留匹配行删除其他行，保留非匹配行删除其他行，
    vim 的参考
    #+begin_quote
    https://zhuanlan.zhihu.com/p/19632777
    #+end_quote

*** 系统相关
1. fc-list 列出当前系统上面的字体
2. xdg 标准规定应用程序启动 desktop 文件放在 /usr/share/applications 中，可以使用 dex 来从命令行启动，dex 需要安装
3. 使用 select-editor 可以选择一些程序的默认编辑器，比如 ranger 的
4. watch 命令可以循环执行命令并输出

*** elisp相关
1. with-eval-after-load和eval-after-load的区别
   [[https://stackoverflow.com/questions/21880139/what-is-with-eval-after-load-in-emacs-lisp][stackoverflow]]
   #+BEGIN_QUOTE
   Lisp Changes in Emacs 24.4
   ...
   New macro `with-eval-after-load'.
   This is like the old `eval-after-load', but better behaved.
   #+END_QUOTE
   #+BEGIN_SRC elisp -n
     (eval-after-load "foo"
       '(progn
          (setq foo 42)
          (setq bar 17)))
   #+END_SRC
   与下面的相等
   #+BEGIN_SRC elisp
     (with-eval-after-load "foo"
       (setq foo 42)
       (setq bar 17))
   #+END_SRC

   #+RESULTS:

2. 获取寄存器的值需要用字符码而不是符号
   #+BEGIN_QUOTE
   但是，通过 M-: 执行 (get-register 'a) 得到的值确实 nil， 为什么？
   因为 get-register 的参数是 字符码 而不是符号。 你要这样用 (get-register 97) ;; => 0 
   忽然发现 ? 后面跟一个字符会返回字符的编码：
   ?只
   ;; => 21482
   ?a
   ;; =>97
   ?^@ ; 用 `C-q C-@' 输入
   ;; => 0
   所以用 (get-register ?a) 就能得到符合预期的结果了。
   #+END_QUOTE
 
[[t1][top]]

*** lua 相关
1. lua 正则中的匹配模式
   #+begin_quote
   Lua 中的匹配模式直接用常规的字符串来描述。 它用于模式匹配函数 string.find, string.gmatch, string.gsub, string.match。
   你还可以在模式串中使用字符类。
   下面的表列出了Lua支持的所有字符类：

   单个字符(除 ^$()%.[]*+-? 外): 与该字符自身配对

   .(点): 与任何字符配对
   %a: 与任何字母配对
   %c: 与任何控制符配对(例如\n)
   %d: 与任何数字配对
   %l: 与任何小写字母配对
   %p: 与任何标点(punctuation)配对
   %s: 与空白字符配对
   %u: 与任何大写字母配对
   %w: 与任何字母/数字配对
   %x: 与任何十六进制数配对
   %z: 与任何代表0的字符配对
   %x(此处x是非字母非数字字符): 与字符x配对. 主要用来处理表达式中有功能的字符(^$()%.[]*+-?)的配对问题, 例如%%与%配对
   [数个字符类]: 与任何[]中包含的字符类配对. 例如[%w_]与任何字母/数字, 或下划线符号(_)配对
   [^数个字符类]: 与任何不包含在[]中的字符类配对. 例如[^%s]与任何非空白字符配对
   当上述的字符类用大写书写时, 表示与非此字符类的任何字符配对. 例如, %S表示与任何非空白字符配对.例如，'%A'非字母的字符:
   #+end_quote
   #+begin_src lua
     print(string.gsub("hello, up-down!", "%A", "."))
     hello..up.down.    4
   #+end_src
   #+begin_quote
   数字4不是字符串结果的一部分，他是gsub返回的第二个结果，代表发生替换的次数。

   在模式匹配中有一些特殊字符，他们有特殊的意义，Lua中的特殊字符如下：

   ( ) . % + - * ? [ ^ $
   '%' 用作特殊字符的转义字符，因此 '%.' 匹配点；'%%' 匹配字符 '%'。转义字符 '%'不仅可以用来转义特殊字符，还可以用于所有的非字母的字符。

   模式条目可以是：

   单个字符类匹配该类别中任意单个字符；
   单个字符类跟一个 '*'， 将匹配零或多个该类的字符。 这个条目总是匹配尽可能长的串；
   单个字符类跟一个 '+'， 将匹配一或更多个该类的字符。 这个条目总是匹配尽可能长的串；
   单个字符类跟一个 '-'， 将匹配零或更多个该类的字符。 和 '*' 不同， 这个条目总是匹配尽可能短的串；
   单个字符类跟一个 '?'， 将匹配零或一个该类的字符。 只要有可能，它会匹配一个；
   %n， 这里的 n 可以从 1 到 9； 这个条目匹配一个等于 n 号捕获物（后面有描述）的子串。
   %bxy， 这里的 x 和 y 是两个明确的字符； 这个条目匹配以 x 开始 y 结束， 且其中 x 和 y 保持 平衡 的字符串。 意思是，如果从左到右读这个字符串，对每次读到一个 x 就 +1 ，读到一个 y 就 -1， 最终结束处的那个 y 是第一个记数到 0 的 y。 举个例子，条目 %b() 可以匹配到括号平衡的表达式。
   %f[set]， 指 边境模式； 这个条目会匹配到一个位于 set 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 set 。 集合 set 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 '\0' 一样。
   模式：

   模式 指一个模式条目的序列。 在模式最前面加上符号 '^' 将锚定从字符串的开始处做匹配。 在模式最后面加上符号 '$' 将使匹配过程锚定到字符串的结尾。 如果 '^' 和 '$' 出现在其它位置，它们均没有特殊含义，只表示自身。

   捕获：

   模式可以在内部用小括号括起一个子模式； 这些子模式被称为 捕获物。 当匹配成功时，由 捕获物 匹配到的字符串中的子串被保存起来用于未来的用途。 捕获物以它们左括号的次序来编号。 例如，对于模式 "(a*(.)%w(%s*))" ， 字符串中匹配到 "a*(.)%w(%s*)" 的部分保存在第一个捕获物中 （因此是编号 1 ）； 由 "." 匹配到的字符是 2 号捕获物， 匹配到 "%s*" 的那部分是 3 号。

   作为一个特例，空的捕获 () 将捕获到当前字符串的位置（它是一个数字）。 例如，如果将模式 "()aa()" 作用到字符串 "flaaap" 上，将产生两个捕获物： 3 和 5 。
   #+end_quote

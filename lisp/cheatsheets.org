#+STARTUP: showall
#+STARTUP: hidestars
#+OPTIONS: H:2 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+AUTHOR: feng
#+DATE: 2020-03-20 Fri 14:59
#+TITLE: test
#+DESCRIPTION: test
#+TAGS: test
#+CATEGORIES: test

#+TITLE: 一些emacs和elisp的cheatsheet
#+OPTIONS: toc:nil

#<<t1>> top

*** *emacs相关*
    1. M-t 交换两个相邻的word
    2. 在文档中用反引号和单引号括起来的symbol是可以跳转过去的，可以使用xref-find-definitions之类的函数(;jd)
    3. 在minibuffer中C-y粘帖剪贴板的内容
    4. 在minibuffer中M-j获取光标下的word
    5. display-local-help(C-h .)显示光标底下的字符的附加信息
    6. isearch-describe-bindings可以描述出isearch模式的所有绑定快捷键
    7. 在/或者?(evil-search-forward,evil-search-backward)后isearch-yank-word-or-char(C-w)可以将光标处的word自动填充到搜索栏
    8. 在/或者?(evil-search-forward,evil-search-backward)后isearch-yank-kill(C-y)可以将kill-ring的最后个word自动填充到搜索栏

*** *elisp相关*
    1. with-eval-after-load和eval-after-load的区别
       [[[[https://stackoverflow.com/questions/21880139/what-is-with-eval-after-load-in-emacs-lisp]]][stackoverflow]]
       #+BEGIN_QUOTE
       Lisp Changes in Emacs 24.4
       ...
       New macro `with-eval-after-load'.
       This is like the old `eval-after-load', but better behaved.
       #+END_QUOTE
       #+BEGIN_SRC elisp -n
         (eval-after-load "foo"
           '(progn
              (setq foo 42)
              (setq bar 17)))
       #+END_SRC
       与下面的相等
       #+BEGIN_SRC elisp
         (with-eval-after-load "foo"
           (setq foo 42)
           (setq bar 17))
       #+END_SRC
    2. 获取寄存器的值需要用字符码而不是符号
       #+BEGIN_QUOTE
       但是，通过 M-: 执行 (get-register 'a) 得到的值确实 nil， 为什么？
       因为 get-register 的参数是 字符码 而不是符号。 你要这样用 (get-register 97) ;; => 0 
       忽然发现 ? 后面跟一个字符会返回字符的编码：
       ?只
       ;; => 21482
       ?a
       ;; =>97
       ?^@ ; 用 `C-q C-@' 输入
       ;; => 0
       所以用 (get-register ?a) 就能得到符合预期的结果了。
       #+END_QUOTE

       [[t1][top]]
